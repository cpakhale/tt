To trigger an Azure DevOps (ADO) pipeline via another ADO pipeline with different parameters, you can use the REST API provided by Azure DevOps in combination with the Invoke REST API task. Here’s a step-by-step guide:

Step 1: Get Personal Access Token (PAT)

Ensure you have a Personal Access Token (PAT) with the necessary permissions to trigger pipelines.

Step 2: Create the Triggering Pipeline

In your main pipeline (let’s call it MainPipeline), add a task to invoke the REST API to trigger the secondary pipeline (SecondaryPipeline). You can use the Invoke REST API task for this.

# azure-pipelines.yml for MainPipeline
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: InvokeRESTAPI@1
  displayName: 'Trigger SecondaryPipeline'
  inputs:
    serviceConnection: '<YourServiceConnection>' # Service connection with the PAT
    urlSuffix: '_apis/pipelines/<SecondaryPipelineID>/runs?api-version=6.0-preview.1'
    method: 'POST'
    headers: |
      Authorization: Bearer $(System.AccessToken)
      Content-Type: application/json
    body: |
      {
        "resources": {
          "repositories": {
            "self": {
              "refName": "refs/heads/main"
            }
          }
        },
        "templateParameters": {
          "parameter1": "value1",
          "parameter2": "value2"
        }
      }
    waitForCompletion: 'false'

Step 3: Configure Service Connection

Make sure to configure a service connection in your Azure DevOps project that uses the PAT.

Step 4: Use Parameters in Secondary Pipeline

Define the parameters in the SecondaryPipeline that will be passed from the MainPipeline.

# azure-pipelines.yml for SecondaryPipeline
parameters:
- name: parameter1
  type: string
  default: 'defaultValue1'
- name: parameter2
  type: string
  default: 'defaultValue2'

trigger: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    echo "Parameter 1: $(parameter1)"
    echo "Parameter 2: $(parameter2)"
  displayName: 'Display Parameters'

Summary

	1.	MainPipeline: Configured to invoke the SecondaryPipeline using the REST API with custom parameters.
	2.	SecondaryPipeline: Configured to accept parameters and perform tasks based on those parameters.

Ensure that the PAT and service connection are properly configured, and the secondary pipeline ID is correct. This setup will trigger the SecondaryPipeline from the MainPipeline with the specified parameters.